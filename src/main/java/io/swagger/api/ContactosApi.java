/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.13).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Contacto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-11-08T18:01:04.874Z[GMT]")
@Api(value = "contactos", description = "the contactos API")
public interface ContactosApi {

    @ApiOperation(value = "Añade un nuevo contacto conocido al listado", nickname = "addContact", notes = "Añade un nuevo contacto conocido al listado", tags={ "contactos", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/contactos",
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addContact(@ApiParam(value = "Contacto que se va a añadir a la lista" ,required=true )  @Valid @RequestBody Contacto body);


    @ApiOperation(value = "Borra un contacto conocido", nickname = "deleteContact", notes = "Borra un contacto conocido", tags={ "contactos", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "ID no valido"),
        @ApiResponse(code = 404, message = "Contacto no encontrado"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/contactos/{contactId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteContact(@ApiParam(value = "",required=true) @PathVariable("contactId") Long contactId);


    @ApiOperation(value = "Busca el contacto más cercano", nickname = "findClosest", notes = "Busca el contacto más cercano", response = Contacto.class, tags={ "contactos", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Contacto cercano encontrado", response = Contacto.class),
        @ApiResponse(code = 404, message = "Contacto cercano no encontrado"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/contactos/buscarCercano",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Contacto> findClosest();


    @ApiOperation(value = "Devuelve la lista de contactos", nickname = "getContacts", notes = "Devuelve la lista de contactos", response = Contacto.class, responseContainer = "List", tags={ "contactos", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Contacto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/contactos",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Contacto>> getContacts();

}
